# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Reflectawesometry', [dirname(__file__)])
        except ImportError:
            import _Reflectawesometry
            return _Reflectawesometry
        if fp is not None:
            try:
                _mod = imp.load_module('_Reflectawesometry', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Reflectawesometry = swig_import_helper()
    del swig_import_helper
else:
    import _Reflectawesometry
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_Reflectawesometry.PI_swigconstant(_Reflectawesometry)
PI = _Reflectawesometry.PI

_Reflectawesometry.TINY_swigconstant(_Reflectawesometry)
TINY = _Reflectawesometry.TINY

def matmul(a, b, c):
    return _Reflectawesometry.matmul(a, b, c)
matmul = _Reflectawesometry.matmul

def read_input_doubles():
    return _Reflectawesometry.read_input_doubles()
read_input_doubles = _Reflectawesometry.read_input_doubles

def read_input_double():
    return _Reflectawesometry.read_input_double()
read_input_double = _Reflectawesometry.read_input_double

def input_thicknesses():
    return _Reflectawesometry.input_thicknesses()
input_thicknesses = _Reflectawesometry.input_thicknesses

def input_slds():
    return _Reflectawesometry.input_slds()
input_slds = _Reflectawesometry.input_slds

def input_roughnesses():
    return _Reflectawesometry.input_roughnesses()
input_roughnesses = _Reflectawesometry.input_roughnesses

def input_qmin():
    return _Reflectawesometry.input_qmin()
input_qmin = _Reflectawesometry.input_qmin

def input_qmax():
    return _Reflectawesometry.input_qmax()
input_qmax = _Reflectawesometry.input_qmax

def calculate_reflectometry(qvals, thicknesses, slds, roughnesses):
    return _Reflectawesometry.calculate_reflectometry(qvals, thicknesses, slds, roughnesses)
calculate_reflectometry = _Reflectawesometry.calculate_reflectometry

def write_to_file(filename, reflectometry_map):
    return _Reflectawesometry.write_to_file(filename, reflectometry_map)
write_to_file = _Reflectawesometry.write_to_file
class layer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, layer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Thickness"] = _Reflectawesometry.layer_Thickness_set
    __swig_getmethods__["Thickness"] = _Reflectawesometry.layer_Thickness_get
    if _newclass:
        Thickness = _swig_property(_Reflectawesometry.layer_Thickness_get, _Reflectawesometry.layer_Thickness_set)
    __swig_setmethods__["SLD"] = _Reflectawesometry.layer_SLD_set
    __swig_getmethods__["SLD"] = _Reflectawesometry.layer_SLD_get
    if _newclass:
        SLD = _swig_property(_Reflectawesometry.layer_SLD_get, _Reflectawesometry.layer_SLD_set)
    __swig_setmethods__["roughness"] = _Reflectawesometry.layer_roughness_set
    __swig_getmethods__["roughness"] = _Reflectawesometry.layer_roughness_get
    if _newclass:
        roughness = _swig_property(_Reflectawesometry.layer_roughness_get, _Reflectawesometry.layer_roughness_set)

    def __init__(self):
        this = _Reflectawesometry.new_layer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _Reflectawesometry.delete_layer
    __del__ = lambda self: None
layer_swigregister = _Reflectawesometry.layer_swigregister
layer_swigregister(layer)


def run_my_model(number_of_layers, qvalues):
    return _Reflectawesometry.run_my_model(number_of_layers, qvalues)
run_my_model = _Reflectawesometry.run_my_model
# This file is compatible with both classic and new-style classes.


